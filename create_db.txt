select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': u'users'}
Col ('relname',)
Row (u'users',)
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': u'participants'}
Col ('relname',)
Row (u'participants',)
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': u'studyparticipants'}
Col ('relname',)
Row (u'studyparticipants',)
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': u'images'}
Col ('relname',)
Row (u'images',)
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': u'useraccess'}
Col ('relname',)
Row (u'useraccess',)
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': u'studies'}
Col ('relname',)
Row (u'studies',)
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': u'events'}
Col ('relname',)
Row (u'events',)

DROP TABLE images
{}
COMMIT

DROP TABLE events
{}
COMMIT

DROP TABLE useraccess
{}
COMMIT

DROP TABLE studyparticipants
{}
COMMIT

DROP TABLE studies
{}
COMMIT

DROP TABLE participants
{}
COMMIT

DROP TABLE users
{}
COMMIT
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': u'users'}
Col ('relname',)
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': u'participants'}
Col ('relname',)
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': u'studyparticipants'}
Col ('relname',)
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': u'images'}
Col ('relname',)
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': u'useraccess'}
Col ('relname',)
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': u'studies'}
Col ('relname',)
select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
{'name': u'events'}
Col ('relname',)

CREATE TABLE users (
	user_id SERIAL NOT NULL, 
	username VARCHAR(50), 
	password VARCHAR(50), 
	PRIMARY KEY (user_id)
)


{}
COMMIT

CREATE TABLE participants (
	participant_id SERIAL NOT NULL, 
	name VARCHAR(50) NOT NULL, 
	PRIMARY KEY (participant_id)
)


{}
COMMIT

CREATE TABLE studies (
	study_id SERIAL NOT NULL, 
	name VARCHAR(256), 
	PRIMARY KEY (study_id)
)


{}
COMMIT

CREATE TABLE studyparticipants (
	study_id INTEGER, 
	participant_id INTEGER, 
	UNIQUE (study_id, participant_id), 
	FOREIGN KEY(study_id) REFERENCES studies (study_id), 
	FOREIGN KEY(participant_id) REFERENCES participants (participant_id)
)


{}
COMMIT

CREATE TABLE useraccess (
	user_id INTEGER, 
	study_id INTEGER, 
	access_level INTEGER NOT NULL, 
	FOREIGN KEY(user_id) REFERENCES users (user_id), 
	FOREIGN KEY(study_id) REFERENCES studies (study_id)
)


{}
COMMIT

CREATE TABLE events (
	event_id SERIAL NOT NULL, 
	participant_id INTEGER, 
	day DATE NOT NULL, 
	start_time TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	end_time TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	comment TEXT, 
	number_times_viewed INTEGER, 
	PRIMARY KEY (event_id), 
	FOREIGN KEY(participant_id) REFERENCES participants (participant_id)
)


{}
COMMIT

CREATE TABLE images (
	image_id SERIAL NOT NULL, 
	image_time TIMESTAMP WITHOUT TIME ZONE, 
	participant_id INTEGER, 
	event_id INTEGER, 
	full_url VARCHAR(256), 
	medium_url VARCHAR(256), 
	thumbnail_url VARCHAR(256), 
	PRIMARY KEY (image_id), 
	FOREIGN KEY(participant_id) REFERENCES participants (participant_id), 
	FOREIGN KEY(event_id) REFERENCES events (event_id)
)


{}
COMMIT
